{
    "AzureResources": {
        "AzureStorageConnectionString": "SetInUserSecrets",
        "AzureOpenAiKey": "SetInUserSecrets",
        "AzureOpenAiEndpoint": "SetInUserSecrets",
        "AzureOpenAiChatDeploymentName": "gpt-4o-mini",
        "AzureOpenAiEmbeddingDeploymentName": "text-embedding-3-small",
        "AzureOpenAiImageDeploymentName": "dall-e-3"        
    },
    "Agents": {
        "DungeonMaster": {
            "Name": "DM",
            "NewCampaignPrompt": "Hello, Dungeon Master! Please greet me asking me about my player character and the world we're in. I'll provide you with some details to get started. Once I do, give me a good hook to start the play session. A good hook should have something compelling for the player to investigate and complete in the first session and allow room for additional sessions afterwards.",
            "ResumeCampaignPrompt": "Hello, Dungeon Master! Please greet me with a recap of our last session and ask me what my goals are for this session. Don't act on those goals, just keep them in mind once I tell you what I want to do.",
            "MainPrompt": "You are a dungeon master directing a table top role playing game. The user represents the only player in the game. Let the player make their own decisions, ask for skill checks and saving rolls when needed, and call functions to get your responses as needed. The player wants agency over their own actions and wants to see a setting develop over time. Feel free to use markdown in your responses, but avoid lists. Ask the player what they'd like to do, but avoid railroading them or giving them many suggestions. Make the world interesting and give players opportunities to make interesting choices, use their skills, and interact with the world in meaningful ways. When the player tells you to do something, ask for relevant skill checks and ask clarifying questions as necessary. It's worse to assume the player's intent and make actions for them than it is to ask the player too many questions."
        }
    },
    "Serilog": {
        "Using": [ "Serilog.Sinks.SpectreConsole", "Serilog.Sinks.File", "Serilog.Expressions", "Serilog.Settings.Configuration" ],
        "MinimumLevel": {
            "Default": "Information",
            "Override": {
                "MattEland.DigitalDungeonMaster": "Debug",
                "Microsoft.SemanticKernel": "Verbose"
            }
        },
        "WriteTo": [
            {
                "Name": "SpectreConsole",
                "Args": {
                    "outputTemplate": "{Timestamp:HH:mm:ss} [{Level:u3}] {Message:lj}{NewLine}{Exception}",
                    "minLevel": "Verbose"
                }
            },
            {
                "Name": "File",
                "Args": {
                    "path": "Transcript.txt",
                    "outputTemplate": "{NewLine}{Message:lj}{NewLine}{Exception}",
                    "rollingInterval": "Day",
                    "retainedFileCountLimit": 7,
                    "buffered": false,
                    "restrictedToMinimumLevel": "Information",
                    "filter": [
                        {
                            "Name": "ByExcluding",
                            "Args": {
                                "expression": "SourceContext like '%Kernel%'"
                            }
                        }
                    ]

                }
            },
            {
                "Name": "File",
                "Args": {
                    "path": "AppLog.json",
                    "minimumLevel": "Debug",
                    "formatter": "Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact",
                    "rollingInterval": "Day",
                    "retainedFileCountLimit": 7,
                    "buffered": false
                }
            }
        ]
    }
}